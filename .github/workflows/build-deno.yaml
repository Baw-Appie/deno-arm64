name: Compile Deno

on:
  release:
    types: [created]

jobs:
  release_metadata:
    name: Get Release Upload Metadata
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_metadata.outputs.upload_url }}
      prerelease: ${{ steps.get_upload_metadata.outputs.prerelease }}
    steps:
      - id: get_upload_metadata
        run: |
          response=$(curl -s -H "Accept: application/json" https://api.github.com/repos/lukechannings/docker-deno/releases)
          release=$(echo $response | jq ".[]|select(.tag_name==\"${GITHUB_REF#refs/tags/}\")")
          echo "::set-output name=upload_url::$(echo $release | jq -r ".upload_url")"
          echo "::set-output name=prerelease::$(echo $release | jq -r ".prerelease")"
  compile:
    runs-on: ubuntu-latest
    needs: release_metadata
    name: "Compile ${{ matrix.target }}"
    strategy:
      matrix:
        target:
          - linux-arm64
          - linux-arm
          - linux-amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install QEMU
        uses: docker/setup-qemu-action@v1
      - run: |
          platform=$(node -p "'${{ matrix.target }}'.replace(/-/g, '/')")
          docker build -t deno-build --build-arg DENO_VERSION=${GITHUB_REF#refs/tags/} --platform=${platform} --file ./Dockerfile.compile .
          docker cp $(docker create deno-build):/deno/target/release/deno ./deno
          zip deno-${{ matrix.target }}.zip ./deno
      - name: Archive deno binary
        uses: actions/upload-artifact@v2
        with:
          name: deno-${{ matrix.target }}
          path: ./deno
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release_metadata.outputs.upload_url }}
          asset_path: ./deno-${{ matrix.target }}.zip
          asset_name: deno-${{ matrix.target }}.zip
          asset_content_type: application/zip
  build-docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: VERSION=${GITHUB_REF#refs/tags/}
          tags: |
            lukechannings/deno:${GITHUB_REF#refs/tags/}
            lukechannings/deno:latest
