name: Compile Deno

on:
  release:
    types: [created]

jobs:
  release_metadata:
    name: Get Release Upload URL
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
    steps:
      - id: get_upload_url
        run: |
          response=$(curl -s -H "Accept: application/json" https://api.github.com/repos/lukechannings/docker-deno/releases)
          url=$(echo $response | jq -r ".[]|select(.tag_name==\"${GITHUB_REF#refs/tags/}\").upload_url")
          echo "::set-output name=test::hello"
          echo "::set-output name=upload_url::${url}"
  compile:
    runs-on: ubuntu-latest
    needs: release_metadata
    name: "Compile ${{ matrix.target }}"
    strategy:
      matrix:
        target:
          - arm64v8
          # - arm32v7
          - amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install QEMU
        uses: docker/setup-qemu-action@v1
      - run: |
          docker build -t deno-build --build-arg IMAGE=${{ matrix.target }}/ubuntu --build-arg DENO_VERSION=${GITHUB_REF#refs/tags/} --file ./Dockerfile.compile .
          docker cp $(docker create deno-build):/deno/target/release/deno ./deno
          zip deno-${{matrix.target }}.zip ./deno
      - name: Archive deno binary
        uses: actions/upload-artifact@v2
        with:
          name: deno-${{ matrix.target }}
          path: ./deno
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release_metadata.outputs.upload_url }}
          asset_path: ./deno-${{matrix.target }}.zip
          asset_name: deno-${{matrix.target }}
          asset_content_type: application/zip
